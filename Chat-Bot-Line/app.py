import os
import random
import numpy as np
import faiss
from flask import Flask, request, abort
from neo4j import GraphDatabase
from sentence_transformers import SentenceTransformer
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    TemplateSendMessage, CarouselTemplate, CarouselColumn, URITemplateAction
)
from linebot.models import QuickReply, QuickReplyButton, MessageAction

app = Flask(__name__)

# -------- LINE Config --------
CHANNEL_SECRET = os.environ.get("LINE_CHANNEL_SECRET", "10cc7f532a62b2208f2bdeb03148705d")
CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN", "o0rmXIz8Xk1QDlHDkPbgLglKWg+qXjzOPnJt/21VmAXGBYuXkFQKlIyt71CpXQrAndBq5tsDAoj9BL+UUiVqkXHj7X1LeM7kRUfoBAgcbTzfo+3me0MPhMcFyF0Hpo1zdrRhbvhzSb5fsbVRURAeVgdB04t89/1O/w1cDnyilFU=")
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# -------- Neo4j Config --------
NEO4J_URI = "bolt://localhost:7687"
NEO4J_USER = "neo4j"
NEO4J_PASSWORD = "password123"
driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))

# -------- Embedding Model --------
model = SentenceTransformer("paraphrase-multilingual-mpnet-base-v2")

# -------- User Session --------
user_profiles = {}

# -------- Chain Questions (8 ‡πÅ‡∏ï‡πà‡∏™‡∏∏‡πà‡∏° 6) --------
all_questions = [
    {"id": "budget", "text": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà? (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500 / 500-1000 / 1000+)"},
    {"id": "place", "text": "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô? (‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™, ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤)"},
    {"id": "size", "text": "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà? (‡πÄ‡∏•‡πá‡∏Å, ‡∏Å‡∏•‡∏≤‡∏á, ‡πÉ‡∏´‡∏ç‡πà)"},
    {"id": "feature", "text": "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô? (‡∏•‡∏î‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å, ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏á‡πà‡∏≤‡∏¢, ‡∏ó‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô)"},
    {"id": "material", "text": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏∞‡πÑ‡∏£? (EVA, ‡∏¢‡∏≤‡∏á, ‡πÇ‡∏ü‡∏°, ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)"},
    {"id": "lifetime", "text": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏õ‡∏µ? (1-2 ‡∏õ‡∏µ, 3-5 ‡∏õ‡∏µ, ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏õ‡∏µ)"},
    {"id": "color", "text": "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡πÑ‡∏´‡∏°? (‡πÄ‡∏ó‡∏≤, ‡∏î‡∏≥, ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)"},
    {"id": "value", "text": "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î? (‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤ / ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)"}
]

quick_map = {
            "budget": [
                QuickReplyButton(action=MessageAction(label="‚â§500", text="‚â§500")),
                QuickReplyButton(action=MessageAction(label="500-1000", text="500-1000")),
                QuickReplyButton(action=MessageAction(label="1000+", text="1000+"))
            ],
            "place": [
                QuickReplyButton(action=MessageAction(label="‡∏ö‡πâ‡∏≤‡∏ô", text="‡∏ö‡πâ‡∏≤‡∏ô")),
                QuickReplyButton(action=MessageAction(label="‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™", text="‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™")),
                QuickReplyButton(action=MessageAction(label="‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤", text="‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤"))
            ],
            "size": [
                QuickReplyButton(action=MessageAction(label="‡πÄ‡∏•‡πá‡∏Å", text="‡πÄ‡∏•‡πá‡∏Å")),
                QuickReplyButton(action=MessageAction(label="‡∏Å‡∏•‡∏≤‡∏á", text="‡∏Å‡∏•‡∏≤‡∏á")),
                QuickReplyButton(action=MessageAction(label="‡πÉ‡∏´‡∏ç‡πà", text="‡πÉ‡∏´‡∏ç‡πà"))
            ],
            "feature": [
                QuickReplyButton(action=MessageAction(label="‡∏•‡∏î‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å", text="‡∏•‡∏î‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å")),
                QuickReplyButton(action=MessageAction(label="‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏á‡πà‡∏≤‡∏¢", text="‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏á‡πà‡∏≤‡∏¢")),
                QuickReplyButton(action=MessageAction(label="‡∏ó‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô", text="‡∏ó‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô"))
            ],
            "material": [
                QuickReplyButton(action=MessageAction(label="EVA", text="EVA")),
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏≤‡∏á", text="‡∏¢‡∏≤‡∏á")),
                QuickReplyButton(action=MessageAction(label="‡πÇ‡∏ü‡∏°", text="‡πÇ‡∏ü‡∏°")),
                QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", text="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
            ],
            "lifetime": [
                QuickReplyButton(action=MessageAction(label="1-2 ‡∏õ‡∏µ", text="1-2 ‡∏õ‡∏µ")),
                QuickReplyButton(action=MessageAction(label="3-5 ‡∏õ‡∏µ", text="3-5 ‡∏õ‡∏µ")),
                QuickReplyButton(action=MessageAction(label="‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏õ‡∏µ", text="‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏õ‡∏µ"))
            ],
            "color": [
                QuickReplyButton(action=MessageAction(label="‡πÄ‡∏ó‡∏≤", text="‡πÄ‡∏ó‡∏≤")),
                QuickReplyButton(action=MessageAction(label="‡∏î‡∏≥", text="‡∏î‡∏≥")),
                QuickReplyButton(action=MessageAction(label="‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", text="‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"))
            ],
            "value": [
                QuickReplyButton(action=MessageAction(label="‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤", text="‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤")),
                QuickReplyButton(action=MessageAction(label="‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", text="‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"))
            ]
        }

# -------- Load Products from Neo4j --------
def load_products():
    with driver.session() as session:
        query = """
        MATCH (p:Product)-[:HAS_IMAGE]->(i:Image)
        RETURN p.name AS name,
               p.price AS price,
               p.url AS url,
               p.description AS description,
               i.url AS image_url
        """
        result = session.run(query)
        return [record.data() for record in result]

# -------- Build FAISS Index --------
def build_faiss_index(products):
    texts = [f"{p['name']} {p['description']} {p['price']}" for p in products]
    embeddings = model.encode(texts, normalize_embeddings=True)
    index = faiss.IndexFlatIP(embeddings.shape[1])  # cosine similarity
    index.add(embeddings)
    return index, embeddings

products = load_products()
index, embeddings = build_faiss_index(products)

# -------- FAISS Search --------
def search_products(query_text, top_k=5):
    query_vec = model.encode([query_text], normalize_embeddings=True)
    distances, indices = index.search(query_vec, top_k)
    return [products[i] for i in indices[0]]

# -------- Flask LINE Bot --------
@app.route("/", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    message = event.message.text.strip()

    # ---- init session ----
    if user_id not in user_profiles:
        selected = random.sample(all_questions, 6)
        user_profiles[user_id] = {
            "questions": selected,
            "answers": {},
            "current_q": 0,
            "finished": False
        }

        qid = selected[0]["id"]
        qtext = selected[0]["text"]

        intro = (
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö üôå  \n"
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà FitBot ü§ñ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡πÄ‡∏ß‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì  \n\n"
        "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?  \n"
        "‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö ‚Äî ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô üèãÔ∏è‚Äç‚ôÇÔ∏è ‡πÅ‡∏ú‡πà‡∏ô‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô EVA, ‡∏¢‡∏≤‡∏á‡∏¢‡∏∑‡∏î‡πÅ‡∏£‡∏á‡∏ï‡πâ‡∏≤‡∏ô, ‡∏ö‡∏≤‡∏£‡πå‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ö‡∏≠‡∏î‡∏µ‡πâ‡πÄ‡∏ß‡∏ó‡∏≠‡∏∑‡πà‡∏ô ‡πÜ  \n\n"
        "üéØ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤  \n"
        "‚Ä¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢: ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏Ñ‡πà 6 ‡∏Ç‡πâ‡∏≠  \n"
        "‚Ä¢ ‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÉ‡∏à: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢  \n"
        "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô, ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î ‡πÅ‡∏•‡∏∞‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î  \n\n"
        "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏Ñ‡∏£‡∏±‡∏ö? üöÄ  \n"
        "‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì üí™  \n\n"
        f"{qtext}"
        )
        
        if qid in quick_map:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text=intro,
                    quick_reply=QuickReply(items=quick_map[qid])
                )
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=intro)
            )
        return

    profile = user_profiles[user_id]

    # ---- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ----
    if not profile["finished"]:
        qid = profile["questions"][profile["current_q"]]["id"]
        profile["answers"][qid] = message
        profile["current_q"] += 1

        if profile["current_q"] < len(profile["questions"]):
            qid = profile["questions"][profile["current_q"]]["id"]
            qtext = profile["questions"][profile["current_q"]]["text"]

            if qid in quick_map:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(
                        text=qtext,
                        quick_reply=QuickReply(items=quick_map[qid])
                    )
                )
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ quick reply ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text=qtext))
            return

        else:
            profile["finished"] = True

    # ---- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö 6 ‡∏Ç‡πâ‡∏≠ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á query text ----
    query_text = " ".join(profile["answers"].values())
    results = search_products(query_text, top_k=5)

    if not results:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏±‡∏ö üò•"))
        return

    # ---- ‡∏™‡∏£‡πâ‡∏≤‡∏á carousel ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ----
    columns = []
    for r in results:
        col = CarouselColumn(
            title=r["name"][:40],
            text=r["price"] or "N/A",
            thumbnail_image_url=r.get("image_url"),
            actions=[URITemplateAction(label="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", uri=r["url"])]
        )
        columns.append(col)

    carousel = TemplateSendMessage(
        alt_text="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
        template=CarouselTemplate(columns=columns)
    )
    line_bot_api.reply_message(event.reply_token, carousel)

if __name__ == "__main__":
    app.run(port=5000)
